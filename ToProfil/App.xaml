<Application
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:ToProfil"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:System="clr-namespace:System;assembly=mscorlib" x:Class="ToProfil.App"
             Startup="Application_Startup">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <materialDesign:CustomColorTheme  BaseTheme="Light" PrimaryColor="#FF333366" SecondaryColor="#FFC02739" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Button.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.PopupBox.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <FontFamily x:Key="Montserrat">pack://application:,,,/Resources/Montserrat/#Montserrat</FontFamily>
            <Style TargetType="{x:Type Button}">
                <Setter Property="Background" Value="{DynamicResource SecondaryAccentBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource SecondaryAccentBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource SecondaryAccentForegroundBrush}"/>
                <Setter Property="materialDesign:ButtonProgressAssist.IndicatorForeground" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Style.BasedOn>
                    <Style TargetType="{x:Type ButtonBase}">
                        <Setter Property="FocusVisualStyle">
                            <Setter.Value>
                                <Style>
                                    <Setter Property="Control.Template">
                                        <Setter.Value>
                                            <ControlTemplate>
                                                <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
                        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
                        <Setter Property="materialDesign:RippleAssist.Feedback" Value="White"/>
                        <Setter Property="materialDesign:ButtonProgressAssist.IndicatorForeground" Value="{DynamicResource SecondaryAccentBrush}"/>
                        <Setter Property="materialDesign:ButtonProgressAssist.IndicatorBackground" Value="{DynamicResource MaterialDesignDivider}"/>
                        <Setter Property="BorderThickness" Value="1"/>
                        <Setter Property="Cursor" Value="Hand"/>
                        <Setter Property="HorizontalContentAlignment" Value="Center"/>
                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                        <Setter Property="materialDesign:ShadowAssist.ShadowDepth" Value="Depth2"/>
                        <Setter Property="Padding" Value="1"/>
                        <Setter Property="Width" Value="40"/>
                        <Setter Property="Height" Value="40"/>
                        <Setter Property="materialDesign:ButtonProgressAssist.Opacity" Value="1"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ButtonBase}">
                                    <Grid>
                                        <AdornerDecorator CacheMode="{Binding (materialDesign:ShadowAssist.CacheMode), RelativeSource={RelativeSource Self}}">
                                            <Ellipse x:Name="border" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}">
                                                <Ellipse.Effect>
                                                    <Binding Path="(materialDesign:ShadowAssist.ShadowDepth)" RelativeSource="{RelativeSource TemplatedParent}">
                                                        <Binding.Converter>
                                                            <materialDesign:ShadowConverter/>
                                                        </Binding.Converter>
                                                    </Binding>
                                                </Ellipse.Effect>
                                            </Ellipse>
                                        </AdornerDecorator>
                                        <ProgressBar x:Name="ProgressBar" Background="{Binding (materialDesign:ButtonProgressAssist.IndicatorBackground), RelativeSource={RelativeSource TemplatedParent}}" Foreground="{Binding (materialDesign:ButtonProgressAssist.IndicatorForeground), RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Stretch" IsIndeterminate="{Binding (materialDesign:ButtonProgressAssist.IsIndeterminate), RelativeSource={RelativeSource TemplatedParent}}" Maximum="{Binding (materialDesign:ButtonProgressAssist.Maximum), RelativeSource={RelativeSource TemplatedParent}}" Margin="-8" Minimum="{Binding (materialDesign:ButtonProgressAssist.Minimum), RelativeSource={RelativeSource TemplatedParent}}" Opacity="{Binding (materialDesign:ButtonProgressAssist.Opacity), RelativeSource={RelativeSource TemplatedParent}}" RenderTransformOrigin="0.5,0.5" Style="{DynamicResource MaterialDesignCircularProgressBar}" Value="{Binding (materialDesign:ButtonProgressAssist.Value), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Stretch">
                                            <ProgressBar.Height>
                                                <TemplateBinding Property="Height">
                                                    <TemplateBinding.ConverterParameter>
                                                        <System:Int32>8</System:Int32>
                                                    </TemplateBinding.ConverterParameter>
                                                    <TemplateBinding.Converter>
                                                        <materialDesign:MathConverter Operation="Add"/>
                                                    </TemplateBinding.Converter>
                                                </TemplateBinding>
                                            </ProgressBar.Height>
                                            <ProgressBar.RenderTransform>
                                                <TransformGroup>
                                                    <ScaleTransform ScaleY="0" ScaleX="0"/>
                                                </TransformGroup>
                                            </ProgressBar.RenderTransform>
                                            <ProgressBar.Visibility>
                                                <Binding Path="(materialDesign:ButtonProgressAssist.IsIndicatorVisible)" RelativeSource="{RelativeSource TemplatedParent}">
                                                    <Binding.Converter>
                                                        <BooleanToVisibilityConverter/>
                                                    </Binding.Converter>
                                                </Binding>
                                            </ProgressBar.Visibility>
                                            <ProgressBar.Width>
                                                <TemplateBinding Property="Width">
                                                    <TemplateBinding.ConverterParameter>
                                                        <System:Int32>8</System:Int32>
                                                    </TemplateBinding.ConverterParameter>
                                                    <TemplateBinding.Converter>
                                                        <materialDesign:MathConverter Operation="Add"/>
                                                    </TemplateBinding.Converter>
                                                </TemplateBinding>
                                            </ProgressBar.Width>
                                        </ProgressBar>
                                        <Ellipse Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}"/>
                                        <materialDesign:Ripple ClipToBounds="True" Clip="{Binding RenderedGeometry, ElementName=GeometryEllipse}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Focusable="False" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                        <Ellipse x:Name="GeometryEllipse" Focusable="False" Fill="Transparent" IsHitTestVisible="False"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="Button.IsDefaulted" Value="True">
                                            <Setter Property="Stroke" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="Opacity" Value="0.75"/>
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="materialDesign:ShadowAssist.Darken" TargetName="border" Value="True"/>
                                        </Trigger>
                                        <Trigger Property="IsKeyboardFocused" Value="True">
                                            <Setter Property="materialDesign:ShadowAssist.Darken" TargetName="border" Value="True"/>
                                        </Trigger>
                                        <Trigger Property="materialDesign:ButtonProgressAssist.IsIndicatorVisible" Value="True">
                                            <Trigger.EnterActions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation Duration="0:0:0.2" From="0.9" To="1" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="ProgressBar"/>
                                                        <DoubleAnimation Duration="0:0:0.2" From="0.9" To="1" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="ProgressBar"/>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </Trigger.EnterActions>
                                            <Trigger.ExitActions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation Duration="0:0:0.2" From="1" To="0.9" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="ProgressBar"/>
                                                        <DoubleAnimation Duration="0:0:0.2" From="1" To="0.9" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="ProgressBar"/>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </Trigger.ExitActions>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Style.BasedOn>
            </Style>
            <ControlTemplate x:Key="ButtonBaseControlTemplate1" TargetType="{x:Type ButtonBase}">
                <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                    <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="Button.IsDefaulted" Value="True">
                        <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="Background" TargetName="border" Value="#FF006880"/>
                        <Setter Property="BorderBrush" TargetName="border" Value="{x:Null}"/>
                    </Trigger>
                    <Trigger Property="ToggleButton.IsChecked" Value="True">
                        <Setter Property="Background" TargetName="border" Value="{x:Null}"/>
                        <Setter Property="BorderBrush" TargetName="border" Value="{x:Null}"/>
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" TargetName="border" Value="#FF006880"/>
                        <Setter Property="BorderBrush" TargetName="border" Value="{x:Null}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                        <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                        <Setter Property="Foreground" Value="#FF838383"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

        </ResourceDictionary>
    </Application.Resources>
</Application>
